import * as THREE from "three";
import { Component, Components, Event, Disposable } from "../../core";
/**
 * Component to load, delete and manage [fragments](https://github.com/ThatOpen/engine_fragment) efficiently. ðŸ“• [Tutorial](https://docs.thatopen.com/Tutorials/Components/Core/FragmentsManager). ðŸ“˜ [API](https://docs.thatopen.com/api/@thatopen/components/classes/FragmentsManager).
 */
export declare class FragmentsManager extends Component implements Disposable {
    /**
     * A unique identifier for the component.
     * This UUID is used to register the component within the Components system.
     */
    static readonly uuid: "fef46874-46a3-461b-8c44-2922ab77c806";
    /** {@link Disposable.onDisposed} */
    readonly onDisposed: Event<unknown>;
    /**
     * Event triggered when fragments are loaded.
     */
    readonly onFragmentsLoaded: Event<any>;
    /**
     * Event triggered when fragments are disposed.
     */
    readonly onFragmentsDisposed: Event<{
        groupID: string;
        fragmentIDs: string[];
    }>;
    baseCoordinationModel: string;
    baseCoordinationMatrix: THREE.Matrix4;
    /** {@link Component.enabled} */
    enabled: boolean;
    initialized: boolean;
    private _core;
    /**
     * Map containing all loaded fragment models.
     * The key is the group's unique identifier, and the value is the model itself.
     */
    get list(): any;
    get core(): any;
    constructor(components: Components);
    /** {@link Disposable.dispose} */
    dispose(): void;
    init(workerURL: string): void;
}
